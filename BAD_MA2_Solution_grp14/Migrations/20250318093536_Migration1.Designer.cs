// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BAD_MA2_Solution_grp14.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250318093536_Migration1")]
    partial class Migration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Experience", b =>
                {
                    b.Property<int>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExperienceId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("ExperienceId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("Guest", b =>
                {
                    b.Property<int>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuestId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GuestId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("Provider", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderId"));

                    b.Property<string>("BuisnessPhysicalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TouristicOperatorPermitPdf")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProviderId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("SharedExperience", b =>
                {
                    b.Property<int>("SharedExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SharedExperienceId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SharedExperienceId");

                    b.ToTable("SharedExperiences");
                });

            modelBuilder.Entity("SharedExperienceDetail", b =>
                {
                    b.Property<int>("SharedExperienceId")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceId")
                        .HasColumnType("int");

                    b.HasKey("SharedExperienceId", "ExperienceId");

                    b.HasIndex("ExperienceId");

                    b.ToTable("SharedExperienceDetails");
                });

            modelBuilder.Entity("SharedExperienceGuest", b =>
                {
                    b.Property<int>("SharedExperienceId")
                        .HasColumnType("int");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.HasKey("SharedExperienceId", "GuestId");

                    b.HasIndex("GuestId");

                    b.ToTable("SharedExperienceGuests");
                });

            modelBuilder.Entity("Experience", b =>
                {
                    b.HasOne("Provider", "Provider")
                        .WithMany("Experiences")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("SharedExperienceDetail", b =>
                {
                    b.HasOne("Experience", "Experience")
                        .WithMany("SharedExperienceDetails")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedExperience", "SharedExperience")
                        .WithMany("SharedExperienceDetails")
                        .HasForeignKey("SharedExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");

                    b.Navigation("SharedExperience");
                });

            modelBuilder.Entity("SharedExperienceGuest", b =>
                {
                    b.HasOne("Guest", "Guest")
                        .WithMany("SharedExperienceGuests")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedExperience", "SharedExperience")
                        .WithMany("SharedExperienceGuests")
                        .HasForeignKey("SharedExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("SharedExperience");
                });

            modelBuilder.Entity("Experience", b =>
                {
                    b.Navigation("SharedExperienceDetails");
                });

            modelBuilder.Entity("Guest", b =>
                {
                    b.Navigation("SharedExperienceGuests");
                });

            modelBuilder.Entity("Provider", b =>
                {
                    b.Navigation("Experiences");
                });

            modelBuilder.Entity("SharedExperience", b =>
                {
                    b.Navigation("SharedExperienceDetails");

                    b.Navigation("SharedExperienceGuests");
                });
#pragma warning restore 612, 618
        }
    }
}
